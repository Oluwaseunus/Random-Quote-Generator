{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["QUOTES_API","colorsArray","defaultState","quote","author","color","store","createStore","state","arguments","length","undefined","action","type","App","componentDidMount","_this","getQuotes","Math","floor","random","fetch","then","response","json","data","_data$quotes$Math$flo","quotes","props","submitNewQuote","this","style","backgroundColor","react_default","a","createElement","className","id","href","onClick","concat","target","rel","Component","Container","connect","dispatch","updateQuote","AppWrapper","es","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5398254d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Provider, connect } from 'react-redux';\nimport { createStore } from 'redux';\n\n// constants\n\nconst QUOTES_API =\n\t'https://gist.githubusercontent.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json';\n\nconst colorsArray = [\n\t'#C33C54',\n\t'#36393B',\n\t'#3C1518',\n\t'#35524A',\n\t'#0267C1',\n\t'#542344',\n\t'#202030',\n\t'#D7263D',\n\t'#1C0F13',\n\t'#6E7E85'\n];\n\n// Redux\n\nconst UPDATE = 'UPDATE';\n\nconst updateQuote = (quote, author, color) => {\n\treturn {\n\t\ttype: UPDATE,\n\t\tquote,\n\t\tauthor,\n\t\tcolor\n\t};\n};\n\nconst defaultState = {\n\tquote: '',\n\tauthor: '',\n\tcolor: ''\n};\n\nconst quoteReducer = (state = defaultState, action) => {\n\tswitch (action.type) {\n\t\tcase UPDATE:\n\t\t\tconst { quote, author, color } = action;\n\t\t\treturn { quote, author, color };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nconst store = createStore(quoteReducer);\n\n// React\n\nclass App extends Component {\n\tcomponentDidMount = () => this.getQuotes();\n\n\tgetQuotes = () => {\n\t\tconst color = colorsArray[Math.floor(Math.random() * 10)];\n\t\tfetch(QUOTES_API)\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tconst { quote, author } = data.quotes[Math.floor(Math.random() * 102)];\n\t\t\t\tthis.props.submitNewQuote(quote, author, color);\n\t\t\t});\n\t};\n\n\trender() {\n\t\tconst { color } = this.props;\n\t\tconst style = {\n\t\t\tbackgroundColor: color,\n\t\t\tcolor: color\n\t\t};\n\n\t\treturn (\n\t\t\t<div className='main' style={style}>\n\t\t\t\t<div className='wrapper' id='quote-box'>\n\t\t\t\t\t<p id='text'>\n\t\t\t\t\t\t<i className='fas fa-quote-left quote' /> {this.props.quote}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p className='wrapper__author'>\n\t\t\t\t\t\t- <small id='author'>{this.props.author}</small>\n\t\t\t\t\t</p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tclassName='btn'\n\t\t\t\t\t\t\thref='#vain'\n\t\t\t\t\t\t\tstyle={{ color: 'white', backgroundColor: color }}\n\t\t\t\t\t\t\tid='new-quote'\n\t\t\t\t\t\t\tonClick={this.getQuotes}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<i className='fas fa-sync-alt' />\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</a>\n\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tclassName='btn'\n\t\t\t\t\t\t\tstyle={{ color: 'white', backgroundColor: color }}\n\t\t\t\t\t\t\tid='tweet-quote'\n\t\t\t\t\t\t\thref={`https://twitter.com/intent/tweet?text=${\n\t\t\t\t\t\t\t\tthis.props.quote\n\t\t\t\t\t\t\t} - ${this.props.author}`}\n\t\t\t\t\t\t\ttarget='_blank'\n\t\t\t\t\t\t\trel='noopener noreferrer'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<i className='fab fa-twitter' />\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// Other Redux ðŸ˜…\n\nconst mapStateToProps = state => {\n\tconst { quote, author, color } = state;\n\treturn { quote, author, color };\n};\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tsubmitNewQuote: (quote, author, color) =>\n\t\t\tdispatch(updateQuote(quote, author, color))\n\t};\n};\n\nconst Container = connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)(App);\n\nclass AppWrapper extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Provider store={store}>\n\t\t\t\t<Container />\n\t\t\t</Provider>\n\t\t);\n\t}\n}\n\nexport default AppWrapper;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppWrapper from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppWrapper />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}